// This file was generated by RedwoodJS
import '@redwoodjs/router'

type ParamType<constraint> = constraint extends "Int" ? number : constraint extends "Boolean" ? boolean : constraint extends "Float" ? number : string;
type RouteParams<Route> = Route extends `${string}/{${infer Param}:${infer Constraint}}/${infer Rest}` ? { [Entry in Param]: ParamType<Constraint> } & RouteParams<`/${Rest}`> : Route extends `${string}/{${infer Param}:${infer Constraint}}` ? { [Entry in Param]: ParamType<Constraint> } : Route extends `${string}/{${infer Param}}/${infer Rest}` ? { [Entry in Param]: string } & RouteParams<`/${Rest}`> : {}
type QueryParams = Record<string | number, string | number | boolean>

declare module '@redwoodjs/router' {
  interface AvailableRoutes {
    // Only "<Route />" components with a "name" and "path" prop will be populated here.
    success: (params?: RouteParams<"/success"> & QueryParams) => "/success"
    cancel: (params?: RouteParams<"/cancel"> & QueryParams) => "/cancel"
    paymentIntentGraphql: (params?: RouteParams<"/payment-intent-graphql"> & QueryParams) => "/payment-intent-graphql"
    prebuiltCheckout: (params?: RouteParams<"/prebuilt-checkout"> & QueryParams) => "/prebuilt-checkout"
    customPaymentFlow: (params?: RouteParams<"/custom-payment-flow"> & QueryParams) => "/custom-payment-flow"
    home: (params?: RouteParams<"/"> & QueryParams) => "/"
  }
}
